spring.application.name=${APP_NAME:ODS-Transfer-Node}
ods.user=${USER_NAME}

server.port=8092
server.tomcat.threads.max=1

#Eureka config
eureka.client.enabled=${EUREKA_ENABLE:false}
eureka.client.serviceUrl.defaultZone=http://${EUREKA_USER:admin}:${EUREKA_PASS:admin}@${EUREKA_URI:localhost:8090}/eureka
eureka.client.healthcheck.enabled=true
eureka.client.registry-fetch-interval-seconds=5
eureka.instance.leaseRenewalIntervalInSeconds=10
eureka.instance.metadata-map.startup=${random.int}

#SBA
management.endpoints.web.exposure.include=*

#Ignore non-null values
spring.jackson.default-property-inclusion=NON_NULL

#Job Datasource config
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.hibernate.ddl-auto=none
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:${COCKROACH_URI:postgresql://localhost:26257/job_details?sslmode=disable}
spring.datasource.username=${COCKROACH_USER:root}
spring.datasource.password=${COCKROACH_PASS:root}

#spring.batch.initialize-schema=always
spring.batch.job.enabled=false

#RabitMQ
ods.rabbitmq.exchange=ods.exchange
#for vfs nodes this should be the APP_NAME which is always lowercase.
ods.rabbitmq.queue=${CONNECTOR_QUEUE:transferQueue}
ods.rabbitmq.routingkey=${CONNECTOR_QUEUE:ods.routing}
spring.rabbitmq.addresses=${RMQ_ADDRESS}
spring.rabbitmq.port=${AMPQ_PORT:5672}
spring.rabbitmq.username=${AMPQ_USER:guest}
spring.rabbitmq.password=${AMPQ_PWD:guest}
spring.rabbitmq.listener.direct.prefetch=1
#Influx
influxdb.token=${INFLUX_TOKEN}
influxdb.org=${INFLUX_ORG}
influxdb.bucket=${INFLUX_BUCKET:transfer_data}
influxdb.url=${INFLUX_URI:https://influxdb.onedatashare.org}
job.metrics.save=true

#optimizer
optimizer.url=${OPTIMIZER_URL:http://localhost:8088}
optimizer.interval=${OPTIMIZER_INTERVAL:120000}
optimizer.enable=${OPTIMIZER_ENABLE:false}

#pmeter
pmeter.report.path=${PMETER_REPORT_PATH :${HOME}/.pmeter/transfer_service_pmeter_measure.txt}
pmeter.cron.run=${ENABLE_PMETER:true}
pmeter.interface=${PMETER_NIC_INTERFACE:awdl0}
pmeter.measure=${PMETER_MEASURE:1}
pmeter.options=${PMETER_CLI_OPTIONS:"-KNS"}
pmeter.cron.expression=${PMETER_CRON_EXP:*/30 * * * * *}

spring.datasource.hikari.maximum-pool-size=${HIKARI_POOL_SIZE:33}

transfer.service.concurrency=${MAX_CONCURRENCY:32}
transfer.service.parallelism=${MAX_PARALLELISM:32}
transfer.service.pipelining=${MAX_PIPELINING:32}

# Micrometer influxdb configure
#management.metrics.export.influx.uri=${INFLUX_URI}
#management.metrics.export.influx.db=${INFLUX_BUCKET}
#management.metrics.export.influx.token=${INFLUX_TOKEN}
#management.metrics.export.influx.org=${INFLUX_ORG}
#management.metrics.export.influx.enabled=true
#management.metrics.export.influx.step=15s
#management.endpoints.web.exposure.exclude=*
#pmeter.cron.expression=0 0/1 * * * *
